
//#FILENAME:src/server/.generated/routes.ts:write-always
import {Router, Request, Response, NextFunction} from "express";
import {ConfigProvider} from "@kapeta/sdk-config";
import { ProxyRouteOptions } from "@kapeta/sdk-proxy-route";
/*
This file contains routes generated by Kapeta. Do not edit this file manually.

To use this file, you need to add the following to your express server - usually in src/server/index.ts:

```typescript
import { createRoutes } from './routes';

const BASE_DIR = Path.resolve(__dirname, "../../dist");
runApp(async (configProvider:ConfigProvider) => {
    const server = await createServer(configProvider);

    // Use the generated routes
    server.use(await createRoutes(configProvider));

    const webpackConfig = require("../../webpack.development.config");
    server.configureAssets(BASE_DIR, webpackConfig);

    server.start("web");
}, Path.resolve(__dirname,'../../'));

```

The above is the default behaviour and if you haven't changed that you shouldn't need to do anything.

*/

{{#consumers-of-type 'kapeta/resource-type-rest-client'}}
    import { create{{type metadata.name}}Router } from './proxies/rest/{{type metadata.name}}-routes';
{{/consumers-of-type}}
{{#consumers-of-type 'kapeta/resource-type-web-fragment'}}
    import { create{{type metadata.name}}Router } from './proxies/fragments/{{type metadata.name}}-routes';
{{/consumers-of-type}}

export const createRoutes = async (config:ConfigProvider, opts:ProxyRouteOptions = {}):Promise<Router> => {
    const routes = Router();
    {{#consumes 'kapeta/resource-type-rest-client'}}
    const restApis = Router();
    {{#consumers-of-type 'kapeta/resource-type-rest-client'}}
        restApis.use(await create{{type metadata.name}}Router(config, opts));
    {{/consumers-of-type}}

    // Catch all unknown routes and return 418 I'm a teapot
    restApis.all('/*', (req: Request, res: Response, next: NextFunction) => {
        res.status(418).json({
            error: 'API endpoint not found',
        });
    });

    routes.use('/api/rest', restApis)

    {{/consumes}}

    {{#consumes 'kapeta/resource-type-web-fragment'}}
    const fragments = Router();
    {{#consumers-of-type 'kapeta/resource-type-web-fragment'}}
        fragments.use(await create{{type metadata.name}}Router(config, opts));
    {{/consumers-of-type}}
    routes.use('/fragments', fragments);
    {{/consumes}}
    return routes;
};
