#FILENAME:src/browser/screens/DataDetailsScreen.tsx:write-never
{{ai-type 'web-screen'}}
{{#ai-comment}}
This is a screen component that displays the details of a data item.
You will rename the component and filename to the name of the data item followed by "DetailsScreen".
{{/ai-comment}}

import React, { useEffect, useState } from 'react';
import {
    Box,
    Button,
    Typography,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    CircularProgress,
    Grid,
} from '@mui/material';
import { useParams, Link as RouterLink, useNavigate } from 'react-router-dom';

{{> helpers/dsl-imports.hbs}}

type DataEntry = {
    key:string
    label:string
    value:string
};

export const DataDetailsScreen = () => {
    const { id } = useParams<{ id: string }>();

    {{#ai-comment}}
        Add constants for the API client hooks
    {{/ai-comment}}

    {{#ai-comment}}
        Replace unknown with the type of the data type
    {{/ai-comment}}
    const [data, setData] = useState<unknown | null>(null);
    const [loading, setLoading] = useState<boolean>(true);

    useEffect(() => {
        const fetchDataAsync = async () => {
            try {
                {{#ai-comment}}
                    Use the right API client and call the right method that fetches the data.
                    Then set the data to the state.
                {{/ai-comment}}
            } catch (error) {
                console.error('Failed to fetch data:', error);
            } finally {
                setLoading(false);
            }
        };

        void fetchDataAsync();
    }, [id]);

    if (loading) {
        {{{{raw}}}}
        return (
            <Box>
                <CircularProgress />
            </Box>
        );
        {{{{/raw}}}}
    }

    if (!data) {
        {{{{raw}}}}
        return (
            <Box>
                <Typography component="h1" variant="h5" sx={{ mb: 4 }}>
                    {/**
                     * STORM-AI: Add a title here that says that the data is not found
                     */}
                </Typography>
            </Box>
        );
        {{{{/raw}}}}
    }

    const detailFields: DataEntry[] = [
        {{#ai-comment}}
            Add the fields that you want to display in the details screen. Use this object format for each field in the array:
            {
                key:string
                label:string
                value:string
            }
        {{/ai-comment}}
    ];

    {{{{raw}}}}
    return (
        <Box sx={{ width: '100%', height: '100%' }}>
            <Typography component="h1" variant="h5" sx={{ mb: 4 }}>
                {/**
                 * STORM-AI: Replace this comment with the title of the screen
                 */}
            </Typography>

            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell>Field</TableCell>
                            <TableCell>Value</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {detailFields.map((field) => (
                            <TableRow key={String(field.key)}>
                                <TableCell>{field.label}</TableCell>
                                <TableCell>{field.value}</TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>

            <Grid container justifyContent="space-between" sx={{ mt: 2 }}>
                {/**
                 * STORM-AI: If the API has a delete method, use this button to perform the delete action. Otherwise, remove it.
                 */}
                <Grid item>
                    <Button variant="text" color="error">
                        Delete
                    </Button>
                </Grid>

                {/**
                 * STORM-AI: If the API has an edit method, use this link to navigate to the edit screen. Otherwise, remove it.
                 */}
                <Grid item>
                    <Button component={RouterLink} to={`/resources/:id/edit`} variant="contained" color="primary">
                        Edit
                    </Button>
                </Grid>
            </Grid>
        </Box>
    );
    {{{{/raw}}}}
};