#FILENAME:src/browser/screens/DataListScreen.tsx:write-never
{{ai-type 'web-screen'}}
{{#ai-comment}}
    This is a screen component that displays a list of data items.
    You will rename the component and filename to the name of the data item followed by "Screen".
{{/ai-comment}}
import React, { useEffect, useMemo, useCallback } from 'react';
import {
    Box,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Typography,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

{{> helpers/dsl-imports.hbs}}

type Column<T> = {
    /**
     * The label of the column that will be displayed in the table header
     */
    label: string;
    /**
     * The key of the property in the data object that will be displayed in the table
     */
    key: keyof T;
};

export const DataListScreen: React.FC = () => {
    const navigate = useNavigate();

    {{#ai-comment}}
        Add constants for the API client hooks
    {{/ai-comment}}

    {{#ai-comment}}
        Rename data and setData with appropriate names related to the fetched resource
    {{/ai-comment}}
    const [data, setData] = React.useState<[]>([]);
    useEffect(() => {
        const fetchDataAsync = async () => {
            {{#ai-comment}}
                Use the right API client and call the right method that fetches the data.
                Then set the data to the state.
            {{/ai-comment}}
        };

        void fetchDataAsync();
    }, []);

    const handleRowClick = useCallback((id: string) => {
        {{#ai-comment}}
            Use navigate to redirect to the right screen
        {{/ai-comment}}
    }, []);

    {{#ai-comment}}
        Replace any with the type of the item
    {{/ai-comment}}
    const columns = useMemo<Column<any>[]>(
        () => [
            {{#ai-comment}}
                Add the most relevant columns to display in the table.
                Avoid displaying sensitive information in the table.
                Avoid showing multi-line text in the table.
            {{/ai-comment}}
        ],
        []
    );

    {{#ai-comment}}
        Replace any with the type of the item
    {{/ai-comment}}
    const getRowId = useCallback((item: any): string => {
        {{#ai-comment}}
            Return a unique identifier of the item
        {{/ai-comment}}
        return '';
    }, []);

    {{#raw}}
    return (
        <Box sx=&#123;\{ width: '100%', height: '100%' }}>
            <Typography component="h1" variant="h5" sx=&#123;\{ mb: 4 }}>
                {/**
                 * STORM-AI: Replace this comment with the title of the screen
                 */}
            </Typography>

            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            {columns.map((column) => (
                                <TableCell key={String(column.key)}>{column.label}</TableCell>
                            ))}
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {data.map((item) => (
                            <TableRow key={getRowId(item)} hover onClick={() => handleRowClick(getRowId(item))}>
                                {columns.map((column) => (
                                    <TableCell key={String(column.key)}>{item[column.key]}</TableCell>
                                ))}
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>
        </Box>
    );
    {{/raw}}
};