//#FILENAME:src/browser/.generated/clients/{{type data.metadata.name}}Client.ts:write-always
//
// GENERATED SOURCE - DO NOT EDIT
//

import { useMemo } from "react";
import { RestClient, RestClientRequest } from "@kapeta/sdk-web-rest-client";
{{#eachTypeReference data.spec.methods all=true}}
import { {{type name}} } from "../../../.generated/entities/{{type name}}";
{{/eachTypeReference}}

export type Configure{{type data.metadata.name}}Client = (client:{{type data.metadata.name}}Client) => {{type data.metadata.name}}Client;

/**
* Creates a new {{type data.metadata.name}}Client for React components.
* The client is configured with the provided configuration function.
*
* It is wrapped in a useMemo hook to ensure that the client is only created once.
*/
export const use{{type data.metadata.name}}Client = (configure?:Configure{{type data.metadata.name}}Client):{{type data.metadata.name}}Client => {
    return useMemo(() => {
        const client = new {{type data.metadata.name}}Client();
        if (configure) {
            return configure(client);
        }
        return client;
    }, [configure]);
}

/**
* A client for the {{type data.metadata.name}} API.
* Use the use{{type data.metadata.name}}Client hook to create a client in React.
*
* Use the {{type data.metadata.name}}Client directly in other contexts.
*/
export class {{type data.metadata.name}}Client extends RestClient {

    constructor() {
        super('api/rest/{{string data.metadata.name}}');
    }

{{#methods data.spec.methods}}

    /**
    {{#if description}}
    * {{comment description}}
    *
    {{/if}}
    * HTTP: {{./method}} /api/rest/{{../data.metadata.name}}{{path}}
    */
    async {{method methodName}}(
    {{#arguments arguments}}
        {{variable argumentName}}{{#if this.optional}}?{{/if}}:{{fieldtype this}}
    {{/arguments}}
    ):Promise<{{returnType responseType}}{{#ifValueType responseType}}|null{{/ifValueType}}> {

    {{#ifValueType responseType}}const result = {{/ifValueType}}await this.$execute<{{returnType responseType}}>(
    '{{string method}}',
    '{{string path}}',
    [
    {{#arguments arguments}}
        {
        name: '{{string argumentName}}',
        value: {{variable argumentName}},
        transport: '{{string transport}}'
        }
    {{/arguments}}
    ]
    );

    {{#ifValueType responseType}}
        if (result === null) {
            return null;
        }
        return result as {{returnType ../responseType}};
    {{/ifValueType}}
    }

    /**
    {{#if description}}
    * {{comment description}}
    *
    {{/if}}
    * Throws if service responds with a status code higher than 399 and not 404.
    * For 404 responses, null is returned.
    *
    * HTTP: {{./method}} /api/rest/{{../data.metadata.name}}{{path}}
    */
    {{method methodName}}Request(
    {{#arguments arguments}}
        {{variable argumentName}}{{#if this.optional}}?{{/if}}:{{fieldtype this}}
    {{/arguments}}
    ):RestClientRequest<{{returnType responseType}}{{#ifValueType responseType}}|null{{/ifValueType}}> {

    return this.$create<{{returnType responseType}}>(
    '{{string method}}',
    '{{string path}}',
    [
    {{#arguments arguments}}
        {
        name: '{{string argumentName}}',
        value: {{variable argumentName}},
        transport: '{{string transport}}'
        }
    {{/arguments}}
    ]
    );
    }

{{/methods}}
}