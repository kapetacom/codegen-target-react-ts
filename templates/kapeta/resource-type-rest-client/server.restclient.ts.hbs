//#FILENAME:src/server/.generated/clients/{{type data.metadata.name}}Client.ts:write-always
//
// GENERATED SOURCE - DO NOT EDIT
//
import { RestClient, RestClientRequest} from '@kapeta/sdk-rest-client';
import { ConfigProvider } from '@kapeta/sdk-config';
{{#eachTypeReference data.spec.methods all=true}}
import { {{type name}} } from "../../../.generated/entities/{{type name}}";
{{/eachTypeReference}}


/**
 * Creates a new ready {{type data.metadata.name}}Client.
 *
 * See https://github.com/kapetacom/sdk-nodejs-rest-client for more information.
 */
export async function create{{type data.metadata.name}}Client(configProvider:ConfigProvider):Promise<{{type data.metadata.name}}Client> {
    return new {{type data.metadata.name}}Client(false).$withConfigProvider(configProvider);
}

/**
 * A client for the {{data.metadata.name}} API.
 *
 * Note that this client is not ready to use until it is configured with a ```ConfigProvider```.
 * This happens automatically when using the ```create{{type data.metadata.name}}Client``` function or
 * setting ```autoInit``` to true (the default).
 *
 * If you want to configure the client manually, set autoInit to false and call ```$withConfigProvider```.
 *
 * Recommended method is using ```create{{type data.metadata.name}}Client(configProvider:ConfigProvider)```;
 *
 * See https://github.com/kapetacom/sdk-nodejs-rest-client for more information.
 */
export class {{type data.metadata.name}}Client extends RestClient {

    constructor(autoInit:boolean = true) {
        super('{{string data.metadata.name}}', autoInit);
    }

{{#methods data.spec.methods}}


    /**
    * {{comment description}}
    *
    * Throws if service responds with a status code higher than 399 and not 404.
    * For 404 responses, null is returned.
    *
    * HTTP: {{./method}} {{path}}
    */
    async {{method methodName}}(
    {{#arguments arguments}}
        {{variable argumentName}}{{#if this.optional}}?{{/if}}:{{fieldtype this}}
    {{/arguments}}
    ):Promise<{{returnType responseType}}{{#ifValueType responseType}}|null{{/ifValueType}}> {

    {{#ifValueType responseType}}const result = {{/ifValueType}}await this.$execute(
    '{{string method}}',
    '{{string path}}',
    [
    {{#arguments arguments}}
        {
        name: '{{string argumentName}}',
        value: {{variable argumentName}},
        transport: '{{string transport}}'
        }
    {{/arguments}}
    ]
    );

    {{#ifValueType responseType}}
        if (result === null) {
        return null;
        }
        return result as {{returnType ../responseType}};
    {{/ifValueType}}
    }

    /**
    * {{comment description}}
    *
    * Creates a request that can be manipulated before sending it with the ```call()``` method.
    *
    * HTTP: {{./method}} {{path}}
    */
    {{method methodName}}Request(
    {{#arguments arguments}}
        {{variable argumentName}}{{#if this.optional}}?{{/if}}:{{fieldtype this}}
    {{/arguments}}
    ):RestClientRequest<{{returnType responseType}}{{#ifValueType responseType}}|null{{/ifValueType}}> {

    return this.$create(
    '{{string method}}',
    '{{string path}}',
    [
    {{#arguments arguments}}
        {
        name: '{{string argumentName}}',
        value: {{variable argumentName}},
        transport: '{{string transport}}'
        }
    {{/arguments}}
    ]
    );
    }

{{/methods}}
}