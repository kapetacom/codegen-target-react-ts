//#FILENAME:webpack.development.config.js:write-always
//
// GENERATED SOURCE - DO NOT EDIT
//
const Path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const webpack = require('webpack');
const HotMiddlewareScript = 'webpack-hot-middleware/client?path=/__webpack_hmr&timeout=20000&reload=true';
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const TerserJSPlugin = require('terser-webpack-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');

const SITES = [];

{{#providers-of-type 'web.blockware.com/v1/Site'}}
    SITES.push({
        name: "{{string metadata.name}}",
        path: "{{string spec.path}}",
        localPath: "{{snakecase metadata.name}}"
    });
{{/providers-of-type}}

const devMode = process.env.NODE_ENV === 'development';

const styleLoader = devMode ? 'style-loader' : {
    loader: MiniCssExtractPlugin.loader
};

const makeEntry = (localPath) => {
    const path = './' + Path.join('./src/browser/pages/', localPath);

    if (!devMode) {
        return [path];
    }

    return [
        'react-hot-loader/patch',
        HotMiddlewareScript,
        path
    ];
};

const entries = {};
const htmlPlugins = [];

SITES.forEach((site) => {
    while(site.path.startsWith('/')) {
        site.path = site.path.substr(1);
    }

    if (site.localPath) {
        const chunk = site.path + '/main';
        entries[chunk] = makeEntry(site.localPath)
        htmlPlugins.push(new HtmlWebpackPlugin({
            title: site.name,
            filename: site.path + '/index.html',
            chunks: [chunk]
        }));
    } else {
        const chunk = 'main';
        entries[chunk] = makeEntry('main')
        htmlPlugins.push(new HtmlWebpackPlugin({
            title: site.name,
            filename: 'index.html',
            chunks: [chunk]
        }));
    }
});

const config = {
    mode: devMode ? 'development' : 'production',
    optimization: devMode ? {} : {
        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],
    },
    output: {
        path: Path.join(__dirname, 'dist'),
        filename: '[name].[hash].bundle.js',
        publicPath: '/'
    },
    entry: entries,
    devtool: devMode ? 'inline-source-map' : false,
    module: {
        rules: [
            {
                test: /\.(ts|tsx)$/,
                loader: 'babel-loader',
                options: {
                    presets: [
                        '@babel/env',
                        '@babel/typescript',
                        '@babel/react'
                    ],
                    plugins: [
                        'react-hot-loader/babel',
                        ['@babel/plugin-proposal-decorators', {legacy: true} ],
                        ['@babel/plugin-proposal-class-properties', { loose: true }],
                        '@babel/proposal-object-rest-spread',
                    ]
                }
            },
            {
                test: /\.less$/,
                loaders: [ styleLoader, 'css-loader', 'less-loader'],
                include: Path.resolve(__dirname, "./")
            },
            {
                test: /\.s[ac]ss$/i,
                use: [ styleLoader, 'css-loader', 'sass-loader' ],
                include: Path.resolve(__dirname, "./")
            },
            {
                test: /\.ya?ml$/,
                loaders: ['json-loader', 'yaml-loader'],
                include: Path.resolve(__dirname, "./")
            }
        ]
    },
    resolve: {
        extensions: [
            '.js',
            '.jsx',
            '.ts',
            '.tsx',
            '.less',
            '.sass',
            '.scss',
            '.yml',
            '.yaml'
        ],
        alias: devMode ? {
            'react-dom': '@hot-loader/react-dom'
        } : {}
    },
    plugins: htmlPlugins,
    externals: {

    }
};

if (devMode) {
    config.plugins.unshift(new webpack.HotModuleReplacementPlugin());
} else {
    config.plugins.unshift(new MiniCssExtractPlugin({
        filename: '[name].[hash].css',
        chunkFilename: '[id].[hash].css',
    }));

    config.plugins.unshift(new CleanWebpackPlugin());
}

module.exports = config;